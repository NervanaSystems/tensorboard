# Copyright 2017 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
"""Sample text summaries exhibiting all the text plugin features."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from six.moves import xrange  # pylint: disable=redefined-builtin
import tensorflow as tf
from tensorboard.plugins.custom import summary

# Directory into which to write tensorboard data.
LOGDIR = '/tmp/custom_demo'

STEPS = {
  1: 'Create a folder under <strong>tensorboard/plugins</strong>, e.g. \
  this plugin is loated at tensorboard/plugins/custom, with an empty \
  <strong>\__init__.py</strong>',
  2: 'Add <strong><PLUGIN_NAME>_plugin.py</strong>, it defines routes/API endpoints and activity \
  status of your plugin. If you are not able to launch new plugin for some reason, it is \
  possible that you didn\'t properly define active conditions with <strong>is_active</strong> function.',
  3: 'Add <strong>summary.py</strong>, you will be using/importing this file to write \
  summary. Some plugins only recognize data that is generated by its \
  summary writer. If you want to launch other plugins with this plugin, \
  e.g. scalar, you can use <strong>from tensorboard.plugins.scalar \
  import scalar_summary</strong> or <strong>from tensorboard import summary as summary_lib \
  </strong> to add scalar data',
  4: 'Add <strong><PLUGIN_NAME>_demo.py</strong> for generating demo data. Many plugins \
  have demo files, so people can run <strong>bazel run //tensorboard/plugins/<PLUGIN_NAME>:\
  <PLUGIN_NAME>_demo</strong> to generate data and play with the plugin.',
  5: 'Add <strong>metadata.py</strong> and <strong>plugin_data.proto</strong> for storing \
  your metadata and data protobuf schema. Some plugins don\'t have them. I think it\'s \
  more like a best practice thing, they make the code look cleaner, but they are optional.',
  6: 'Add a folder <strong>tf_<PLUGIN_NAME>_dashboard</strong> for front-end. The framework \
  is Polymer.',
  7: 'Add two bazel <strong>BUILD</strong> files, one for backend and one for frontend. This \
  will copy and compile the files to destination folder. If you have problems importing any files, \
  it is possible that you forgot to specify dependencies so Tensorboard can\'t find the files in dist \
  folder. Take a look at the /bazel-out folder if necessary, that is where they dump the static files.',
  8: 'Register new plugin. Update these files so Tensorboard knows you have a new plugin: \
  <li>tensorboard/BUILD</li>\
  <li>tensorboard/components/tf_tensorboard/BUILD</li>\
  <li>tensorboard/components/tf_tensorboard/default-plugins.html</li>\
  <li>tensorboard/default.py</li>\
  <li>tensorboard/summary.py</li>\
  <li>tensorboard/summary_test.py</li> Just simply follow what they have done for other plugins.',
  9: 'Launch Tensorboard with <strong>bazel run tensorboard -- --logdir=<LOG_DIR></strong>. Make \
  sure to relaunch Tensorboard if you have new log data, because sometimes it only reads data \
  when it gets launched, not when you refresh the page.',
  10: 'Add any test files if necessary. Run tests with:\
  <li>Back-end unit test: bazel test tensorboard/...</li>\
  <li>Selenium integration test: bazel test //tensorboard/functionaltests:core_test</li>\
  <li>Front-end unit test: bazel run //tensorboard/plugins/<PLUGIN_NAME>/<PATH_TO_TEST_FOLDER>/test</li>'
}


def run_all(logdir):
  tf.reset_default_graph()
  step_content_placeholder = tf.placeholder(tf.string)

  with tf.name_scope('how_to_create_custom_plugin'):
    summary.op('step_by_step', step_content_placeholder)
  all_summaries = tf.summary.merge_all()

  with tf.Session() as sess:
    writer = tf.summary.FileWriter(logdir)
    for step, step_content in STEPS.items():
      s = sess.run(all_summaries, feed_dict={step_content_placeholder: step_content})
      writer.add_summary(s, global_step=step)
    writer.close()


def main(unused_argv):
  tf.logging.set_verbosity(tf.logging.INFO)
  tf.logging.info('Saving output to %s.' % LOGDIR)
  run_all(LOGDIR)
  tf.logging.info('Done. Output saved to %s.' % LOGDIR)


if __name__ == '__main__':
  tf.app.run()
